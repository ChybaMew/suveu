// code for bord YD_RP2040
// with oled display
// by ChybaWojtek?

#include <Wire.h>           //necessary libraries
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>


#define i2c_Address 0x3c
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

#define I2C_SDA 16 //here change if you have different i2c pins
#define I2C_SCL 17


#define relay 2 //relay pin
#define switch 3 // switch pin

const unsigned char logo_only [] PROGMEM = {// 'logo_only', 66x30px
	0xe0, 0x00, 0x00, 0x38, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0xa0, 0xff, 0xff, 0xe8, 0x1a, 0xbf, 0x87, 
	0x1c, 0x00, 0xe1, 0x00, 0x00, 0x38, 0x2e, 0xe0, 0x7d, 0x17, 0x00, 0x42, 0x00, 0x00, 0x00, 0x40, 
	0x00, 0x07, 0x1c, 0x80, 0x84, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x40, 0x88, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x89, 0x1f, 0xc7, 0x1c, 0xe3, 0x8f, 0xf3, 0x8e, 0x40, 0x89, 
	0x20, 0x25, 0x14, 0xa2, 0x94, 0x12, 0x8a, 0x40, 0x9d, 0x3f, 0xc5, 0x14, 0xa2, 0x97, 0xe2, 0x8a, 
	0x40, 0x95, 0x28, 0x05, 0x14, 0xa2, 0x94, 0x02, 0x8a, 0x40, 0x9d, 0x28, 0x05, 0x14, 0xa2, 0x94, 
	0x02, 0x8a, 0x40, 0x81, 0x28, 0x05, 0x14, 0xa2, 0x94, 0x02, 0x8a, 0x40, 0x81, 0x3f, 0xc5, 0x14, 
	0x55, 0x1f, 0xe2, 0x8a, 0x40, 0x5d, 0x20, 0x25, 0x14, 0x55, 0x10, 0x12, 0x8a, 0x40, 0x35, 0x1f, 
	0xe5, 0x14, 0x55, 0x1f, 0xe2, 0x8a, 0x40, 0x5d, 0x00, 0xa5, 0x14, 0x2a, 0x14, 0x02, 0x8a, 0x40, 
	0x81, 0x00, 0xa5, 0x14, 0x2a, 0x14, 0x02, 0x8a, 0x40, 0x81, 0x00, 0xa5, 0x14, 0x2a, 0x14, 0x02, 
	0x8a, 0x40, 0x9d, 0x1f, 0xe5, 0xf4, 0x2a, 0x17, 0xe2, 0xfa, 0x40, 0x96, 0x20, 0x26, 0x0c, 0x14, 
	0x14, 0x13, 0x06, 0x40, 0x9c, 0x1f, 0xc3, 0xf8, 0x08, 0x0f, 0xf1, 0xfc, 0xc0, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x80, 0x00, 0x00, 0x01, 0x8d, 0x80, 0x00, 0x02, 0x40, 0x5c, 
	0x00, 0x07, 0x01, 0x51, 0x5c, 0x03, 0x84, 0x40, 0x37, 0xfc, 0x05, 0xc1, 0x91, 0x97, 0xc2, 0xf8, 
	0x40, 0x1c, 0x02, 0x07, 0x21, 0x11, 0x5c, 0x23, 0x80, 0x40, 0x00, 0x01, 0x00, 0x11, 0x0d, 0x80, 
	0x10, 0x00, 0x40, 0x00, 0x00, 0x87, 0x08, 0x00, 0x07, 0x08, 0xe7, 0x40, 0x00, 0x00, 0x7d, 0x0f, 
	0xff, 0xfd, 0x07, 0xa5, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0x00, 0xe7, 0x00
};
const unsigned char no_serial_detected [] PROGMEM = {// 'no_serial_detected', 31x29px
	0x97, 0x1d, 0xdd, 0x74, 0xd5, 0x11, 0x15, 0x54, 0xb5, 0x1d, 0xd5, 0x74, 0x95, 0x05, 0x19, 0x54, 
	0x97, 0x1d, 0xd5, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x94, 0x52, 0x00, 0x00, 0x88, 0x22, 0x00, 
	0x01, 0x14, 0x51, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x07, 0xc1, 0x00, 
	0x01, 0x08, 0x21, 0x00, 0x00, 0x90, 0x12, 0x00, 0x00, 0x90, 0x12, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xce, 0xee, 0x6e, 0xec, 0xa8, 0x48, 0x84, 0x8a, 0xae, 0x4e, 0x84, 0xea, 0xa8, 0x48, 0x84, 0x8a, 
	0xce, 0x4e, 0x64, 0xec
};
const unsigned char rabbit_on_cat [] PROGMEM = {// 'rabbit_on_cat', 24x36px
	0x00, 0x03, 0x60, 0x00, 0x04, 0x90, 0x00, 0x05, 0xb0, 0x00, 0x05, 0xb0, 0x00, 0x05, 0xb0, 0x00, 
	0x08, 0x08, 0x00, 0x09, 0x28, 0x00, 0x19, 0x28, 0x00, 0x28, 0x48, 0x00, 0x24, 0x10, 0x00, 0x23, 
	0xe0, 0x00, 0x24, 0xa0, 0x01, 0xa4, 0xac, 0x02, 0x5f, 0xd2, 0x02, 0xa0, 0x2a, 0x02, 0x80, 0x0a, 
	0x02, 0x00, 0x02, 0x01, 0x18, 0xc4, 0x02, 0x38, 0xe2, 0x02, 0x18, 0xc2, 0x07, 0x00, 0x07, 0x02, 
	0x07, 0x02, 0x07, 0x02, 0x07, 0x02, 0x00, 0x02, 0x01, 0x00, 0x04, 0x02, 0x70, 0x72, 0x62, 0xd8, 
	0xaa, 0xf2, 0xa8, 0xda, 0xf4, 0x70, 0x71, 0x94, 0x00, 0x01, 0x94, 0x00, 0x01, 0x8c, 0x00, 0x01, 
	0x82, 0x70, 0x71, 0x42, 0xaa, 0xaa, 0x23, 0x8d, 0x8c, 0x1c, 0x70, 0x70
};
const unsigned char rat [] PROGMEM = {// 'rat', 19x18px
	0x38, 0x00, 0x00, 0x44, 0x07, 0x00, 0x92, 0x08, 0x80, 0xba, 0x12, 0x40, 0x93, 0xe7, 0x40, 0x40, 
	0x02, 0x40, 0x30, 0x00, 0x80, 0x0a, 0x87, 0x00, 0x10, 0x08, 0x00, 0x20, 0xa8, 0xc0, 0x1c, 0x49, 
	0x20, 0x02, 0x08, 0x20, 0x02, 0x04, 0x20, 0x06, 0x24, 0x20, 0x0a, 0x42, 0x20, 0x02, 0x12, 0x40, 
	0x02, 0x12, 0x40, 0x05, 0xed, 0x80
};

Adafruit_SH1106G oled = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); ///here change if you have different oled screen

void setup() 
{
  Serial.begin(9600); //initiating serial port communication

  Wire.setSDA(I2C_SDA); //initiating i2c communication
  Wire.setSCL(I2C_SCL);
  Wire.begin();

  oled.begin(i2c_Address, true);
  oled.clearDisplay();
  oled.setTextColor(1);
  oled.setTextSize(1);

  oled.drawBitmap(31, 5, logo_only, 66, 30, 1); //showing logo bitmap

  oled.setCursor(25, 37);       //drawing text under logo bitmap
  oled.print("SEMI-AUTOMATIC");
  oled.setCursor(25, 45);
  oled.print(" ULTRA VIOLET ");
  oled.setCursor(25, 53);
  oled.print("EXPOSURE  UNIT");
  oled.display();
  
  delay(2000);
  oled.clearDisplay();

  oled.drawFastHLine(0, 63, 128, 1);
  oled.drawBitmap(127 - 24 , 62 - 36, rabbit_on_cat, 24, 36, 1);
  oled.display();

  bool visible = 1; //waiting for serial port communication
  while(!Serial)
  {
    if(visible)
    {
      oled.drawBitmap(1 , 1, no_serial_detected, 31, 29, 1); //showing no_serial_detected bitmap
      oled.display();
      visible = 0;
    }
  }

  Serial.print("-ready"); //showing serial comunicatino on the oled display

  oled.setCursor(1, 1);
  oled.print("-ready");
  oled.display();

  while(!Serial.find("|ready"));

  oled.setCursor(1, 9);
  oled.print("|ready");
  oled.display();

  delay(50);

  oled.setCursor(1, 17);
  oled.print(":communication");
  oled.setCursor(1, 25);
  oled.print("initialized");
  oled.display();

  delay(200);
  oled.clearDisplay();
  oled.display();
}
void loop() 
{

}
